# Automatically generated by Pynguin.
import pytest
import doing_math as module0


def test_case_0():
    var0 = -2238
    var1 = module0.add_some_numbers(var0, var0)
    assert var1 == -4476
    var2 = 1081
    var3 = 2140
    var4 = module0.subtract_some_numbers(var0, var3)
    assert var4 == -4378
    var5 = module0.add_some_numbers(var2, var2)
    assert var5 == 2162


def test_case_1():
    var0 = 5167
    var1 = 1239
    var2 = module0.floor_divide_some_numbers(var0, var1)
    assert var2 == 4
    var3 = -3484
    var4 = -1094
    var5 = module0.multiply_some_numbers(var4, var0)
    assert var5 == -5652698
    var6 = module0.divide_some_numbers(var0, var3)
    assert var6 == pytest.approx(-1.483065442020666, abs=0.01, rel=0.01)
    var7 = -234
    var8 = module0.subtract_some_numbers(var7, var0)
    assert var8 == -5401
    var9 = 953
    var10 = module0.multiply_some_numbers(var0, var9)
    assert var10 == 4924151
    var11 = module0.multiply_some_numbers(var7, var9)
    assert var11 == -223002
    var12 = 4198
    var13 = 3199
    var14 = -2926
    var15 = module0.divide_some_numbers(var12, var14)
    assert var15 == pytest.approx(-1.4347231715652768, abs=0.01, rel=0.01)
    var16 = 750
    var17 = module0.subtract_some_numbers(var14, var16)
    assert var17 == -3676
    var18 = module0.subtract_some_numbers(var12, var13)
    assert var18 == 999
    var19 = -1237
    var20 = -615
    var21 = 1088
    var22 = module0.subtract_some_numbers(var20, var21)
    assert var22 == -1703
    var23 = module0.floor_divide_some_numbers(var19, var14)
    assert var23 == 0


def test_case_2():
    var0 = -2102
    var1 = module0.add_some_numbers(var0, var0)
    assert var1 == -4204
    var2 = 1898
    var3 = module0.multiply_some_numbers(var0, var2)
    assert var3 == -3989596


def test_case_3():
    var0 = -5155
    var1 = 1771
    var2 = module0.multiply_some_numbers(var1, var1)
    assert var2 == 3136441
    var3 = module0.multiply_some_numbers(var0, var0)
    assert var3 == 26574025
    var4 = -311
    var5 = module0.multiply_some_numbers(var0, var4)
    assert var5 == 1603205


def test_case_4():
    var0 = -2303
    var1 = -1290
    var2 = module0.multiply_some_numbers(var0, var1)
    assert var2 == 2970870
    var3 = -2023
    var4 = -2957
    var5 = module0.subtract_some_numbers(var4, var4)
    assert var5 == 0
    var6 = 1089
    var7 = module0.subtract_some_numbers(var3, var6)
    assert var7 == -3112
    var8 = -2535
    var9 = module0.divide_some_numbers(var6, var8)
    assert var9 == pytest.approx(-0.42958579881656805, abs=0.01, rel=0.01)
    var10 = -4343
    var11 = -1748
    var12 = module0.subtract_some_numbers(var11, var8)
    assert var12 == 787
    var13 = 4104
    var14 = -60
    var15 = module0.subtract_some_numbers(var3, var13)
    assert var15 == -6127
    var16 = module0.add_some_numbers(var13, var14)
    assert var16 == 4044
    var17 = -304
    var18 = module0.add_some_numbers(var17, var6)
    assert var18 == 785
    var19 = 86
    var20 = -2491
    var21 = module0.subtract_some_numbers(var19, var20)
    assert var21 == 2577
    var22 = module0.floor_divide_some_numbers(var8, var10)
    assert var22 == 0
    var23 = 2020
    var24 = 1808
    var25 = module0.divide_some_numbers(var23, var24)
    assert var25 == pytest.approx(1.1172566371681416, abs=0.01, rel=0.01)
    var26 = module0.divide_some_numbers(var4, var3)
    assert var26 == pytest.approx(1.4616905585763718, abs=0.01, rel=0.01)
    var27 = -281
    var28 = module0.divide_some_numbers(var27, var4)
    assert var28 == pytest.approx(0.0950287453500169, abs=0.01, rel=0.01)
    var29 = module0.add_some_numbers(var23, var23)
    assert var29 == 4040
    var30 = module0.floor_divide_some_numbers(var3, var4)
    assert var30 == 0
    var31 = -113
    var32 = module0.subtract_some_numbers(var31, var6)
    assert var32 == -1202
    var33 = module0.subtract_some_numbers(var3, var4)
    assert var33 == 934
    var34 = -346
    var35 = 2032
    var36 = module0.floor_divide_some_numbers(var0, var35)
    assert var36 == -2
    var37 = module0.multiply_some_numbers(var34, var35)
    assert var37 == -703072


def test_case_5():
    var0 = -5783
    var1 = -2647
    var2 = -1601
    var3 = module0.add_some_numbers(var1, var2)
    assert var3 == -4248
    var4 = -776
    var5 = module0.multiply_some_numbers(var0, var4)
    assert var5 == 4487608
    var6 = module0.divide_some_numbers(var0, var0)
    assert var6 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var7 = 4620
    var8 = module0.divide_some_numbers(var7, var0)
    assert var8 == pytest.approx(-0.798893307971641, abs=0.01, rel=0.01)
    var9 = -2539
    var10 = module0.multiply_some_numbers(var9, var4)
    assert var10 == 1970264
    var11 = -189
    var12 = 2978
    var13 = -1227
    var14 = -333
    var15 = module0.subtract_some_numbers(var13, var14)
    assert var15 == -894
    var16 = 658
    var17 = module0.subtract_some_numbers(var13, var16)
    assert var17 == -1885
    var18 = module0.floor_divide_some_numbers(var12, var1)
    assert var18 == -2
    var19 = -379
    var20 = module0.subtract_some_numbers(var19, var4)
    assert var20 == 397
    var21 = module0.divide_some_numbers(var7, var2)
    assert var21 == pytest.approx(-2.8856964397251716, abs=0.01, rel=0.01)
    var22 = module0.floor_divide_some_numbers(var11, var19)
    assert var22 == 0
    var23 = 2138
    var24 = -773
    var25 = -492
    var26 = module0.divide_some_numbers(var24, var25)
    assert var26 == pytest.approx(1.5711382113821137, abs=0.01, rel=0.01)
    var27 = module0.divide_some_numbers(var23, var23)
    assert var27 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var28 = module0.divide_some_numbers(var11, var19)
    assert var28 == pytest.approx(0.49868073878627966, abs=0.01, rel=0.01)
    var29 = 1078
    var30 = module0.multiply_some_numbers(var29, var29)
    assert var30 == 1162084
    var31 = 3953
    var32 = module0.divide_some_numbers(var31, var31)
    assert var32 == pytest.approx(1.0, abs=0.01, rel=0.01)
    var33 = module0.add_some_numbers(var25, var16)
    assert var33 == 166
